name: VP CD

on:
  push:
    branches:
      - master

jobs:
  build-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'

      - name: Build with Maven
        run: mvn -B package --file vp-api/pom.xml

      - name: Login and push to container registry
        run: |
          echo ${{ secrets.REGISTRY_PASS }} | docker login registry.bastian-somon.fr -u ${{ secrets.REGISTRY_USER }} --password-stdin
          docker build -t registry.bastian-somon.fr/vp-backend:latest vp-api
          docker push registry.bastian-somon.fr/vp-backend:latest

  build-client:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login and push to container registry
        run: |
          echo ${{ secrets.REGISTRY_PASS }} | docker login registry.bastian-somon.fr -u ${{ secrets.REGISTRY_USER }} --password-stdin
          docker build -t registry.bastian-somon.fr/vp-frontend:latest frontend
          docker push registry.bastian-somon.fr/vp-frontend:latest

  deploy-infra:
    needs: [build-server, build-client]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Trigger deploy
        uses: Consensys/kubernetes-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        with:
          args: apply -k infra/application

  rollout-infra:
    needs: [deploy-infra]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Trigger backend rollout
        uses: Consensys/kubernetes-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        with:
          args: rollout restart deployment spring -n vp
      - name: Trigger frontend rollout
        uses: Consensys/kubernetes-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG }}
        with:
          args: rollout restart deployment nginx -n vp
#
#jobs:
#  deploy-server:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Login and push to container registry
#        run: |
#          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
#          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/visual-productivity:server-latest vp-api
#          docker push ${{ secrets.DOCKERHUB_USERNAME }}/visual-productivity:server-latest
#
#      - name: Copy docker-compose.server.yml file to vps
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          source: docker/docker-compose.server.yml
#          target: /apps/vp
#          strip_components: 1
#
#      - name: Deploy using ssh
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          port: 22
#          script: |
#            cd /apps/vp
#            docker compose -f docker-compose.server.yml down
#            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/visual-productivity:server-latest
#            echo "" > .env
#            echo "API_PATH=${{ secrets.API_PATH }}" >> .env
#            echo "PORT=${{ secrets.PORT }}" >> .env
#            echo "DB_URL=${{ secrets.DB_URL }}" >> .env
#            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
#            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
#            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
#            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
#            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
#            echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
#            echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
#            echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
#            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
#            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
#            echo "S3_ENDPOINT=${{ secrets.S3_ENDPOINT }}" >> .env
#            echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
#            echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
#            echo "S3_TEMP_FOLDER=${{ secrets.S3_TEMP_FOLDER }}" >> .env
#            echo "S3_USER_BUCKET=${{ secrets.S3_USER_BUCKET }}" >> .env
#            echo "S3_PROJECT_BUCKET=${{ secrets.S3_PROJECT_BUCKET }}" >> .env
#            echo "VP_ALLOWED_ORIGINS=${{ secrets.VP_ALLOWED_ORIGINS }}" >> .env
#            echo "VP_ALLOWED_METHODS=${{ secrets.VP_ALLOWED_METHODS }}" >> .env
#            echo "VP_ALLOWED_HEADERS=${{ secrets.VP_ALLOWED_HEADERS }}" >> .env
#            echo "VP_REGISTER_PATTERN=${{ secrets.VP_REGISTER_PATTERN }}" >> .env
#            echo "ORIGIN=${{ secrets.ORIGIN }}" >> .env
#            export $(grep -v '^#' .env | xargs)
#            docker compose -f docker-compose.server.yml up -d --build
#
#  deploy-client:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Use Node.js 16
#        uses: actions/setup-node@v2
#        with:
#          node-version: 16.x
#
#      - run: cd vp-ui && npm i && npm run build
#
#      - name: Copy dist files to vps
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          source: vp-ui/dist/vp-ui/*
#          target: /var/www/html/vp
#          strip_components: 3
